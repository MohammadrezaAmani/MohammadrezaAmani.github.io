{"version":3,"file":"static/js/610.b7bb89dd.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/styles/cssUtils.js","../node_modules/@mui/system/esm/colorManipulator.js","../node_modules/@mui/material/Skeleton/skeletonClasses.js","../node_modules/@mui/material/Skeleton/Skeleton.js","components/hero.tsx","app/page.tsx"],"sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport clamp from '@mui/utils/clamp';\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clampWrapper(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return clamp(value, min, max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\nexport function blend(background, overlay, opacity, gamma = 1.0) {\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSkeletonUtilityClass(slot) {\n  return generateUtilityClass('MuiSkeleton', slot);\n}\nconst skeletonClasses = generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'rounded', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);\nexport default skeletonClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"animation\", \"className\", \"component\", \"height\", \"style\", \"variant\", \"width\"];\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4;\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { keyframes, css } from '@mui/system';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha, unstable_getUnit as getUnit, unstable_toUnitless as toUnitless } from '../styles';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getSkeletonUtilityClass } from './skeletonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    animation,\n    hasChildren,\n    width,\n    height\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']\n  };\n  return composeClasses(slots, getSkeletonUtilityClass, classes);\n};\nconst pulseKeyframe = keyframes(_t || (_t = _`\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.4;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`));\nconst waveKeyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    transform: translateX(-100%);\n  }\n\n  50% {\n    /* +0.5s of delay between each loop */\n    transform: translateX(100%);\n  }\n\n  100% {\n    transform: translateX(100%);\n  }\n`));\nconst SkeletonRoot = styled('span', {\n  name: 'MuiSkeleton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';\n  const radiusValue = toUnitless(theme.shape.borderRadius);\n  return _extends({\n    display: 'block',\n    // Create a \"on paper\" color with sufficient contrast retaining the color\n    backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),\n    height: '1.2em'\n  }, ownerState.variant === 'text' && {\n    marginTop: 0,\n    marginBottom: 0,\n    height: 'auto',\n    transformOrigin: '0 55%',\n    transform: 'scale(1, 0.60)',\n    borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,\n    '&:empty:before': {\n      content: '\"\\\\00a0\"'\n    }\n  }, ownerState.variant === 'circular' && {\n    borderRadius: '50%'\n  }, ownerState.variant === 'rounded' && {\n    borderRadius: (theme.vars || theme).shape.borderRadius\n  }, ownerState.hasChildren && {\n    '& > *': {\n      visibility: 'hidden'\n    }\n  }, ownerState.hasChildren && !ownerState.width && {\n    maxWidth: 'fit-content'\n  }, ownerState.hasChildren && !ownerState.height && {\n    height: 'auto'\n  });\n}, ({\n  ownerState\n}) => ownerState.animation === 'pulse' && css(_t3 || (_t3 = _`\n      animation: ${0} 2s ease-in-out 0.5s infinite;\n    `), pulseKeyframe), ({\n  ownerState,\n  theme\n}) => ownerState.animation === 'wave' && css(_t4 || (_t4 = _`\n      position: relative;\n      overflow: hidden;\n\n      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */\n      -webkit-mask-image: -webkit-radial-gradient(white, black);\n\n      &::after {\n        animation: ${0} 2s linear 0.5s infinite;\n        background: linear-gradient(\n          90deg,\n          transparent,\n          ${0},\n          transparent\n        );\n        content: '';\n        position: absolute;\n        transform: translateX(-100%); /* Avoid flash during server-side hydration */\n        bottom: 0;\n        left: 0;\n        right: 0;\n        top: 0;\n      }\n    `), waveKeyframe, (theme.vars || theme).palette.action.hover));\nconst Skeleton = /*#__PURE__*/React.forwardRef(function Skeleton(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiSkeleton'\n  });\n  const {\n      animation = 'pulse',\n      className,\n      component = 'span',\n      height,\n      style,\n      variant = 'text',\n      width\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    animation,\n    component,\n    variant,\n    hasChildren: Boolean(other.children)\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(SkeletonRoot, _extends({\n    as: component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other, {\n    style: _extends({\n      width,\n      height\n    }, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The animation.\n   * If `false` the animation effect is disabled.\n   * @default 'pulse'\n   */\n  animation: PropTypes.oneOf(['pulse', 'wave', false]),\n  /**\n   * Optional children to infer width and height from.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The type of content that will be rendered.\n   * @default 'text'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'rectangular', 'rounded', 'text']), PropTypes.string]),\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default Skeleton;","import { useState } from \"react\";\nimport { Skeleton } from \"@mui/material\";\nimport { profile } from \"../configs/data\";\nimport { commonArgs } from \"../configs/types\";\n\nfunction Image({\n  imageLoaded,\n  handleImageError,\n}: {\n  imageLoaded: boolean;\n  handleImageError: () => void;\n}) {\n  const containerClass = imageLoaded ? \"\" : \"ml-4 mt-4 scale-150\";\n\n  return (\n    <div className={`shadow-lg rounded-lg p-4  sm:flex ${containerClass}`}>\n      {imageLoaded ? (\n        <img\n          src=\"https://avatars.githubusercontent.com/u/64687226?v=4\"\n          className={`rounded-lg h-72 w-72 object-cover`}\n          alt=\"Profile\"\n          onError={handleImageError}\n        />\n      ) : (\n        <Skeleton variant=\"rectangular\" width={12} height={12} />\n      )}\n    </div>\n  );\n}\n\nfunction Hero({ theme, lang, slug }: commonArgs) {\n  const [imageLoaded, setImageLoaded] = useState<boolean>(true);\n  let keylang = profile.langs.find((item) => item.lang === lang);\n  if (!keylang) {\n    keylang = profile.langs[0];\n  }\n  const handleImageError = () => {\n    setImageLoaded(false);\n  };\n\n  return (\n    <div className=\"w-full h-full sm:mt-0 relative\">\n      <div className=\"container mx-auto\">\n        <div\n          className={`flex flex-col sm:flex-row items-center \n                      justify-center p-6 w-full shadow-lg \n                      rounded-b-lg h-screen sm:mt-0 bg-gray-100\n                      relative\n          `}\n        >\n          <Image\n            imageLoaded={imageLoaded}\n            handleImageError={handleImageError}\n          />\n          <div className=\"flex flex-col sm:w-1/2 sm:ml-4\">\n            <h1 className={`text-4xl font-bold mt-6 sm:mt-0`}>\n              {keylang.name}\n            </h1>\n            <p className={`text-lg mt-4`}>{keylang.about}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Hero;\n","import Hero from \"./../components/hero\";\nimport { commonArgs } from \"./../configs/types\";\n\nexport default function Home({ theme, lang, slug }: commonArgs) {\n  return <Hero lang={lang} theme={theme} slug={slug} />;\n}\n"],"names":["getUnit","input","String","match","toUnitless","length","parseFloat","clampWrapper","value","min","arguments","undefined","max","clamp","decomposeColor","color","type","charAt","slice","re","RegExp","concat","colors","map","n","index","parseInt","Math","round","join","hexToRgb","marker","indexOf","substring","Error","_formatMuiErrorMessage","colorSpace","values","split","shift","recomposeColor","i","alpha","getSkeletonUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_templateObject","_templateObject2","_templateObject3","_templateObject4","_excluded","_t","_t2","_t3","_t4","pulseKeyframe","keyframes","_taggedTemplateLiteral","waveKeyframe","SkeletonRoot","styled","name","overridesResolver","props","styles","ownerState","root","variant","animation","hasChildren","withChildren","width","fitContent","height","heightAuto","_ref","theme","radiusUnit","shape","borderRadius","radiusValue","_extends","display","backgroundColor","vars","palette","Skeleton","bg","text","primary","mode","marginTop","marginBottom","transformOrigin","transform","content","visibility","maxWidth","_ref2","css","_ref3","action","hover","React","inProps","ref","useThemeProps","className","component","style","other","_objectWithoutPropertiesLoose","Boolean","children","classes","slots","composeClasses","useUtilityClasses","_jsx","as","clsx","Image","imageLoaded","handleImageError","containerClass","src","alt","onError","lang","slug","setImageLoaded","useState","keylang","profile","langs","find","item","_jsxs","about","Home","Hero"],"sourceRoot":""}